{
  "IDLE": [
    {
      "bottomDescription": "Dieses Programm dient dazu, das Funktionsprinzip der MIMA zukünftigen Generationen von Studenten anschaulich zu erklären. Da die originale Visualisierung (Java Applet) leider in meisten modernen Browsern nicht mehr läuft, wurde MIMAviz als eine Neuerstellung der originalen MIMA Simulation in Javascript entwickelt. \n\nMehr Info unter github.com/hexrcs/MIMAviz und ti.ira.uka.de/Visualisierungen/Mima/",
      "cuDescription": "Willkommen bei MIMAviz!"
    }
  ],
  "ADD": [
    {
      "bottomDescription": "ADD - Der Akkumulator wird überschrieben durch das Ergebnis der Addition von Akku und dem Inhalt von <a>.",
      "cuDescription": "Jetzt START drücken!"
    },
    {
      "bottomDescription": "Im IAR, dem Instruktionsadreßregister steht die Adresse des auszuführenden Befehls. IAR könnte man auch als Befehlszähler bezeichnen. Damit wir nun an die Speicherzelle und deren Inhalt kommen, müssen wir diese an das SAR (Speicheradreßregister) weitergeben. Nach 3x R=1 Lesezyklen bekommen wir unser gewünschtes Datum. Außerdem laden wir gleichzeitig (um Zeit zu sparen) die gleiche Adresse auch in das X Register der ALU. Später soll die ALU den Wert um eins erhöhen, damit unsere MiMa beim nächsten mal den nachfolgenden Befehl liest.",
      "cuDescription": "IAR zeige auf ein ADD Befehl"
    },
    {
      "bottomDescription": "Wie schon erwähnt, soll das IAR (Instruktionsadreßregister) um EINS erhöht werden. Wie besser könnte das geschehen, als durch eine Addition mit Eins? Der erste Operand (die gegebene Speicheradresse im IAR) ist bereits vorhin schon ins Register X geladen worden. Die Konstante EINS wird nun sinnvollerweise ins Y Register transferiert. Sei nun gespannt auf den dritten Takt!!",
      "cuDescription": "Lade 1 nach Y für IAR++"
    },
    {
      "bottomDescription": "Unsere ALU soll nun die bereits erwähnten X und Y Register addieren. Für die Addition gibt unser Steuerwerk an den Leitungen C2C1C0 die Werte 001. Am besten du schaust dir die Tabelle auf dem Blatt \"Architektur der MIMA\" genauer an. Die ALU kann nämlich ziemlich viel!",
      "cuDescription": "ALU addiert: Z:=X+Y"
    },
    {
      "bottomDescription": "Das langersehnte Ergebnis unserer Addition ist nun abholfertig im Z Register verfügbar. Wohin nun mit dem Ergebnis? Hast du gut aufgepaßt? Ja, richtig, es war Ziel das IAR um eins zu erhöhen. Also tun wir das in dem wir das Ergebnis IAR+1 von Z nach IAR zurückschreiben.",
      "cuDescription": "IAR++ von Z ins IAR schreiben."
    },
    {
      "bottomDescription": "Nun haben wir auch den Inhalt der Speicherzelle [IAR] im SDR (Speicherdatenregister) vorliegen. Hat ein bißchen gedauert, aber der Speicher ist halt nicht so schnell. Diesen Wert speichern wir zur Interpretation und Ausführung durch das Steuerwerk in das IR (Instruktionsregister).",
      "cuDescription": "Befehl aus Speicher ins IR schreiben"
    },
    {
      "bottomDescription": "D=1 bedeutet, daß das Steuerwerk das IR Register liest und je nach Inhalt (Befehl) das entsprechende Mikroprogramm aus dem internen Speicher des Steuerwerks anspringt und ausführt. Du kannst nun den eigentlichen Befehl verfolgen und das nächste Mal diese FETCH Phase mittels der SKIP-Taste überspringen, falls du sie schon auswendig können solltest. Viel Spaß!",
      "cuDescription": "Starte Exec-Phase für ADD Befehl"
    },
    {
      "bottomDescription": "Im IR (Instruktionsregister) stehen nicht nur die Befehle sondern auch die Variablen und Konstanten, die mit dem Befehl aus dem Speicher gelesen werden. Das Praktische ist, daß der SAR nur 20 Bit lang ist und somit die ersten 4 Bit der 24 Bit langen Instruktion bei dem Transfer IR -> SAR wegfallen. Somit wird nämlich der BefehlsOpcode abgeschnitten und die gewünschte zu adressierende Speicheradresse <a> wird ordnungsgemäß ins SAR geschrieben!",
      "cuDescription": "Adressiere a von <a>"
    },
    {
      "bottomDescription": "Der ADD Befehl soll ja den Akku mit der Speicherzelle <a> durch eine Addition verknüpfen. Diese Addition wird vorbereitet, indem schonmal der Inhalt des Akku ins X Register transferiert wird, während wir auf den Speicher warten, der uns den Inhalt von a, also <a> geben soll.",
      "cuDescription": "Akku + <a> vorbereiten"
    },
    {
      "bottomDescription": "Jo, sodele, nun warten wir eben noch kurz auf den Speicher, denn dieser benötigt immer drei Takte, bis er das verlangte Datum abliefern kann.",
      "cuDescription": "Der Speicher ist lahm!! ;-)"
    },
    {
      "bottomDescription": "Jetzt haben wir unseren langersehnten Wert <a> am SDR (Speicherdatenregister) anliegen. Da in X schon der Inhalt des Akku steht schreiben wir in Y unseren Inhalt von Speicherzelle a hin.",
      "cuDescription": "Speicher ist fertig mit lesen!"
    },
    {
      "bottomDescription": "Schnell noch die beiden Werte addieren und das gewünschte Ergebnis steht im Z Register. Damit die ALU weiß, das sie eine Addition durchzuführen hat, gibt das Steuerwerk an die Eingänge der ALU C2C1C0 die Werte (001).",
      "cuDescription": "Addition Z:=X+Y"
    },
    {
      "bottomDescription": "Wie in der Aufgabenstellung für unseren ADD a Befehl zu entnehmen ist, soll das Ergebnis zurück in den Akku geschrieben werden.",
      "cuDescription": "Ergebnis Z in den Akku"
    }
  ],
  "LDC": [
    {
      "bottomDescription": "LDC - Lade den Akkumulator mit einer 20-bit Konstante.",
      "cuDescription": "Jetzt START drücken!"
    },
    {
      "bottomDescription": "Im IAR, dem Instruktionsadreßregister steht die Adresse des auszuführenden Befehls. IAR könnte man auch als Befehlszähler bezeichnen. Damit wir nun an die Speicherzelle und deren Inhalt kommen, müssen wir diese an das SAR (Speicheradreßregister) weitergeben. Nach 3x R=1 Lesezyklen bekommen wir unser gewünschtes Datum. Außerdem laden wir gleichzeitig (um Zeit zu sparen) die gleiche Adresse auch in das X Register der ALU. Später soll die ALU den Wert um eins erhöhen, damit unsere MiMa beim nächsten mal den nachfolgenden Befehl liest.",
      "cuDescription": "IAR zeige auf ein LDC Befehl"
    },
    {
      "bottomDescription": "Wie schon erwähnt, soll das IAR (Instruktionsadreßregister) um EINS erhöht werden. Wie besser könnte das geschehen, als durch eine Addition mit Eins? Der erste Operand (die gegebene Speicheradresse im IAR) ist bereits vorhin schon ins Register X geladen worden. Die Konstante EINS wird nun sinnvollerweise ins Y Register transferiert. Sei nun gespannt auf den dritten Takt!!",
      "cuDescription": "Lade 1 nach Y für IAR++"
    },
    {
      "bottomDescription": "Unsere ALU soll nun die bereits erwähnten X und Y Register addieren. Für die Addition gibt unser Steuerwerk an den Leitungen C2C1C0 die Werte 001. Am besten du schaust dir die Tabelle auf dem Blatt \"Architektur der MIMA\" genauer an. Die ALU kann nämlich ziemlich viel!",
      "cuDescription": "ALU addiert: Z:=X+Y"
    },
    {
      "bottomDescription": "Das langersehnte Ergebnis unserer Addition ist nun abholfertig im Z Register verfügbar. Wohin nun mit dem Ergebnis? Hast du gut aufgepaßt? Ja, richtig, es war Ziel das IAR um eins zu erhöhen. Also tun wir das in dem wir das Ergebnis IAR+1 von Z nach IAR zurückschreiben.",
      "cuDescription": "IAR++ von Z ins IAR schreiben."
    },
    {
      "bottomDescription": "Nun haben wir auch den Inhalt der Speicherzelle [IAR] im SDR (Speicherdatenregister) vorliegen. Hat ein bißchen gedauert, aber der Speicher ist halt nicht so schnell. Diesen Wert speichern wir zur Interpretation und Ausführung durch das Steuerwerk in das IR (Instruktionsregister).",
      "cuDescription": "Befehl aus Speicher ins IR schreiben"
    },
    {
      "bottomDescription": "D=1 bedeutet, daß das Steuerwerk das IR Register liest und je nach Inhalt (Befehl) das entsprechende Mikroprogramm aus dem internen Speicher des Steuerwerks anspringt und ausführt. Du kannst nun den eigentlichen Befehl verfolgen und das nächste Mal diese FETCH Phase mittels der SKIP-Taste überspringen, falls du sie schon auswendig können solltest. Viel Spaß!",
      "cuDescription": "Starte Exec-Phase für LDC Befehl"
    },
    {
      "bottomDescription": "Das Praktische an dem OpCode des LDC Befehls ist, daß er Null ist. Somit brauchen wir das Instruktionsregister IR nicht mehr weiter filtern und können dieses direkt in den Akku laden.",
      "cuDescription": "Lade Konstante in Akku"
    }
  ],
  "LDV": [
    {
      "bottomDescription": "LDV - Lade den Akkumulator mit dem Inhalt von <a>.",
      "cuDescription": "Jetzt START drücken!"
    },
    {
      "bottomDescription": "Im IAR, dem Instruktionsadreßregister steht die Adresse des auszuführenden Befehls. IAR könnte man auch als Befehlszähler bezeichnen. Damit wir nun an die Speicherzelle und deren Inhalt kommen, müssen wir diese an das SAR (Speicheradreßregister) weitergeben. Nach 3x R=1 Lesezyklen bekommen wir unser gewünschtes Datum. Außerdem laden wir gleichzeitig (um Zeit zu sparen) die gleiche Adresse auch in das X Register der ALU. Später soll die ALU den Wert um eins erhöhen, damit unsere MiMa beim nächsten mal den nachfolgenden Befehl liest.",
      "cuDescription": "IAR zeige auf ein LDV Befehl"
    },
    {
      "bottomDescription": "Wie schon erwähnt, soll das IAR (Instruktionsadreßregister) um EINS erhöht werden. Wie besser könnte das geschehen, als durch eine Addition mit Eins? Der erste Operand (die gegebene Speicheradresse im IAR) ist bereits vorhin schon ins Register X geladen worden. Die Konstante EINS wird nun sinnvollerweise ins Y Register transferiert. Sei nun gespannt auf den dritten Takt!!",
      "cuDescription": "Lade 1 nach Y für IAR++"
    },
    {
      "bottomDescription": "Unsere ALU soll nun die bereits erwähnten X und Y Register addieren. Für die Addition gibt unser Steuerwerk an den Leitungen C2C1C0 die Werte 001. Am besten du schaust dir die Tabelle auf dem Blatt \"Architektur der MIMA\" genauer an. Die ALU kann nämlich ziemlich viel!",
      "cuDescription": "ALU addiert: Z:=X+Y"
    },
    {
      "bottomDescription": "Das langersehnte Ergebnis unserer Addition ist nun abholfertig im Z Register verfügbar. Wohin nun mit dem Ergebnis? Hast du gut aufgepaßt? Ja, richtig, es war Ziel das IAR um eins zu erhöhen. Also tun wir das in dem wir das Ergebnis IAR+1 von Z nach IAR zurückschreiben.",
      "cuDescription": "IAR++ von Z ins IAR schreiben."
    },
    {
      "bottomDescription": "Nun haben wir auch den Inhalt der Speicherzelle [IAR] im SDR (Speicherdatenregister) vorliegen. Hat ein bißchen gedauert, aber der Speicher ist halt nicht so schnell. Diesen Wert speichern wir zur Interpretation und Ausführung durch das Steuerwerk in das IR (Instruktionsregister).",
      "cuDescription": "Befehl aus Speicher ins IR schreiben"
    },
    {
      "bottomDescription": "D=1 bedeutet, daß das Steuerwerk das IR Register liest und je nach Inhalt (Befehl) das entsprechende Mikroprogramm aus dem internen Speicher des Steuerwerks anspringt und ausführt. Du kannst nun den eigentlichen Befehl verfolgen und das nächste Mal diese FETCH Phase mittels der SKIP-Taste überspringen, falls du sie schon auswendig können solltest. Viel Spaß!",
      "cuDescription": "Starte Exec-Phase für LDV Befehl"
    },
    {
      "bottomDescription": "Im IR (Instruktionsregister) stehen nicht nur die Befehle sondern auch die Variablen und Konstanten, die mit dem Befehl aus dem Speicher gelesen werden. Das Praktische ist, daß der SAR nur 20 Bit lang ist und somit die ersten 4 Bit der 24 Bit langen Instruktion bei dem Transfer IR -> SAR wegfallen. Somit wird nämlich der BefehlsOpcode abgeschnitten und die gewünschte zu adressierende Speicheradresse <a> wird ordnungsgemäß ins SAR geschrieben!",
      "cuDescription": "Adressiere a von <a>"
    },
    {
      "bottomDescription": "Wir müssen bei dieser MiMa Technologie 3 Takte lang auf eine Antwort vom Speicher warten!",
      "cuDescription": "Warten auf den Speicher!"
    },
    {
      "bottomDescription": "Wir müssen bei dieser MiMa Technologie 3 Takte lang auf eine Antwort vom Speicher warten!",
      "cuDescription": "Warten auf den Speicher!"
    },
    {
      "bottomDescription": "Wie man es nun von diesem Befehl erwartet, wird die Antwort aus dem Speicher an den Akkumulator (Akku) übergeben.",
      "cuDescription": "Antwort in Akku schreiben."
    }
  ],
  "NOT": [
    {
      "bottomDescription": "NOT - Der Akkumulator wird überschrieben durch das Einerkomplement seines Inhalts.",
      "cuDescription": "Jetzt START drücken!"
    },
    {
      "bottomDescription": "Im IAR, dem Instruktionsadreßregister steht die Adresse des auszuführenden Befehls. IAR könnte man auch als Befehlszähler bezeichnen. Damit wir nun an die Speicherzelle und deren Inhalt kommen, müssen wir diese an das SAR (Speicheradreßregister) weitergeben. Nach 3x R=1 Lesezyklen bekommen wir unser gewünschtes Datum. Außerdem laden wir gleichzeitig (um Zeit zu sparen) die gleiche Adresse auch in das X Register der ALU. Später soll die ALU den Wert um eins erhöhen, damit unsere MiMa beim nächsten mal den nachfolgenden Befehl liest.",
      "cuDescription": "IAR zeige auf ein NOT Befehl"
    },
    {
      "bottomDescription": "Wie schon erwähnt, soll das IAR (Instruktionsadreßregister) um EINS erhöht werden. Wie besser könnte das geschehen, als durch eine Addition mit Eins? Der erste Operand (die gegebene Speicheradresse im IAR) ist bereits vorhin schon ins Register X geladen worden. Die Konstante EINS wird nun sinnvollerweise ins Y Register transferiert. Sei nun gespannt auf den dritten Takt!!",
      "cuDescription": "Lade 1 nach Y für IAR++"
    },
    {
      "bottomDescription": "Unsere ALU soll nun die bereits erwähnten X und Y Register addieren. Für die Addition gibt unser Steuerwerk an den Leitungen C2C1C0 die Werte 001. Am besten du schaust dir die Tabelle auf dem Blatt \"Architektur der MIMA\" genauer an. Die ALU kann nämlich ziemlich viel!",
      "cuDescription": "ALU addiert: Z:=X+Y"
    },
    {
      "bottomDescription": "Das langersehnte Ergebnis unserer Addition ist nun abholfertig im Z Register verfügbar. Wohin nun mit dem Ergebnis? Hast du gut aufgepaßt? Ja, richtig, es war Ziel das IAR um eins zu erhöhen. Also tun wir das in dem wir das Ergebnis IAR+1 von Z nach IAR zurückschreiben.",
      "cuDescription": "IAR++ von Z ins IAR schreiben."
    },
    {
      "bottomDescription": "Nun haben wir auch den Inhalt der Speicherzelle [IAR] im SDR (Speicherdatenregister) vorliegen. Hat ein bißchen gedauert, aber der Speicher ist halt nicht so schnell. Diesen Wert speichern wir zur Interpretation und Ausführung durch das Steuerwerk in das IR (Instruktionsregister).",
      "cuDescription": "Befehl aus Speicher ins IR schreiben"
    },
    {
      "bottomDescription": "D=1 bedeutet, daß das Steuerwerk das IR Register liest und je nach Inhalt (Befehl) das entsprechende Mikroprogramm aus dem internen Speicher des Steuerwerks anspringt und ausführt. Du kannst nun den eigentlichen Befehl verfolgen und das nächste Mal diese FETCH Phase mittels der SKIP-Taste überspringen, falls du sie schon auswendig können solltest. Viel Spaß!",
      "cuDescription": "Starte Exec-Phase für NOT Befehl"
    },
    {
      "bottomDescription": "Der Akkumulator (Akku) wird zur Komplementbildung durch die ALU in das X Register geladen.",
      "cuDescription": "Akku ins X register laden."
    },
    {
      "bottomDescription": "Die ALU übernimmt für uns die Aufgabe der Komplementbildung (siehe Technische Informatik I). Dazu wird vom Steuerwerk an die ALU das Signal C2C1C0=110 angelegt.",
      "cuDescription": "ALU berechnet Komplement."
    },
    {
      "bottomDescription": "Das Ergebnis der Komplementberechnung wird zurück in den Akkumulator geschrieben.",
      "cuDescription": "Ergebnis in Akku speichern."
    }
  ],
  "STV": [
    {
      "bottomDescription": "STV - Lade die adressierende Speicherzelle an <a> mit dem Inhalt des Akkumulators.",
      "cuDescription": "Jetzt START drücken!"
    },
    {
      "bottomDescription": "Im IAR, dem Instruktionsadreßregister steht die Adresse des auszuführenden Befehls. IAR könnte man auch als Befehlszähler bezeichnen. Damit wir nun an die Speicherzelle und deren Inhalt kommen, müssen wir diese an das SAR (Speicheradreßregister) weitergeben. Nach 3x R=1 Lesezyklen bekommen wir unser gewünschtes Datum. Außerdem laden wir gleichzeitig (um Zeit zu sparen) die gleiche Adresse auch in das X Register der ALU. Später soll die ALU den Wert um eins erhöhen, damit unsere MiMa beim nächsten mal den nachfolgenden Befehl liest.",
      "cuDescription": "IAR zeige auf ein STV Befehl"
    },
    {
      "bottomDescription": "Wie schon erwähnt, soll das IAR (Instruktionsadreßregister) um EINS erhöht werden. Wie besser könnte das geschehen, als durch eine Addition mit Eins? Der erste Operand (die gegebene Speicheradresse im IAR) ist bereits vorhin schon ins Register X geladen worden. Die Konstante EINS wird nun sinnvollerweise ins Y Register transferiert. Sei nun gespannt auf den dritten Takt!!",
      "cuDescription": "Lade 1 nach Y für IAR++"
    },
    {
      "bottomDescription": "Unsere ALU soll nun die bereits erwähnten X und Y Register addieren. Für die Addition gibt unser Steuerwerk an den Leitungen C2C1C0 die Werte 001. Am besten du schaust dir die Tabelle auf dem Blatt \"Architektur der MIMA\" genauer an. Die ALU kann nämlich ziemlich viel!",
      "cuDescription": "ALU addiert: Z:=X+Y"
    },
    {
      "bottomDescription": "Das langersehnte Ergebnis unserer Addition ist nun abholfertig im Z Register verfügbar. Wohin nun mit dem Ergebnis? Hast du gut aufgepaßt? Ja, richtig, es war Ziel das IAR um eins zu erhöhen. Also tun wir das in dem wir das Ergebnis IAR+1 von Z nach IAR zurückschreiben.",
      "cuDescription": "IAR++ von Z ins IAR schreiben."
    },
    {
      "bottomDescription": "Nun haben wir auch den Inhalt der Speicherzelle [IAR] im SDR (Speicherdatenregister) vorliegen. Hat ein bißchen gedauert, aber der Speicher ist halt nicht so schnell. Diesen Wert speichern wir zur Interpretation und Ausführung durch das Steuerwerk in das IR (Instruktionsregister).",
      "cuDescription": "Befehl aus Speicher ins IR schreiben"
    },
    {
      "bottomDescription": "D=1 bedeutet, daß das Steuerwerk das IR Register liest und je nach Inhalt (Befehl) das entsprechende Mikroprogramm aus dem internen Speicher des Steuerwerks anspringt und ausführt. Du kannst nun den eigentlichen Befehl verfolgen und das nächste Mal diese FETCH Phase mittels der SKIP-Taste überspringen, falls du sie schon auswendig können solltest. Viel Spaß!",
      "cuDescription": "Starte Exec-Phase für STV Befehl"
    },
    {
      "bottomDescription": "Der Inhalt des Akkumulators (Akku) soll in den Speicher geschrieben werden. Also laden wir den Akku in das Speicherdatenregister (SDR).",
      "cuDescription": "Daten auf Datenbus legen."
    },
    {
      "bottomDescription": "Im IR (Instruktionsregister) stehen nicht nur die Befehle sondern auch die Variablen und Konstanten, die mit dem Befehl aus dem Speicher gelesen werden. Das Praktische ist, daß der SAR nur 20 Bit lang ist und somit die ersten 4 Bit der 24 Bit langen Instruktion bei dem Transfer IR -> SAR wegfallen. Somit wird nämlich der BefehlsOpcode abgeschnitten und die gewünschte zu adressierende Speicheradresse <a> wird ordnungsgemäß ins SAR geschrieben!",
      "cuDescription": "Adressiere a von <a>"
    },
    {
      "bottomDescription": "Wir müssen bei dieser MiMa Technologie 3 Takte lang auf den Speicher warten!",
      "cuDescription": "Warten auf den Speicher!"
    },
    {
      "bottomDescription": "Wir müssen bei dieser MiMa Technologie 3 Takte lang auf den Speicher warten!",
      "cuDescription": "Warten auf den Speicher!"
    }
  ]
}
